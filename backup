<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KolamVerse – KolamTrace</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@500;700&display=swap" rel="stylesheet" />
    <style>
      :root {
        --accent: #309970;
        --accent-dark: #246149;
        --accent-fade: #b4f1d6;
        --bg: #f7faf9;
        --shadow: 0 2px 24px rgba(70, 110, 89, 0.09);
      }
      body {
        margin: 0;
        font-family: 'Inter', 'Segoe UI', sans-serif;
        background: linear-gradient(115deg, #e8f6f1 0%, #f3f8fa 100%);
        color: #213531;
        min-height: 100vh;
      }
      .trace-bar {
        display: flex;
        align-items: center;
        gap: 18px;
        background: rgba(48, 153, 112, 0.13);
        padding: 30px 48px 18px 48px;
        border-bottom: 1.5px solid #e9f0ea;
      }
      .trace-bar .brand {
        display: flex;
        align-items: center;
        gap: 10px;
      }
      .trace-bar .brand svg {
        width: 42px;
        height: 42px;
        background: #fff;
        border-radius: 50%;
      }
      .trace-bar h1 {
        font-size: 2rem;
        margin: 0;
        font-weight: 700;
        color: #227954;
        letter-spacing: 1.1px;
      }
      .trace-bar .section-title {
        font-size: 1.26rem;
        margin-left: 22px;
        margin-top: 0;
        color: #369178;
        font-weight: 600;
      }
      .main-flex {
        max-width: 1200px;
        background: #fff;
        margin: 40px auto 0 auto;
        border-radius: 34px;
        box-shadow: 0 2px 40px rgba(46, 95, 59, 0.1);
        display: flex;
        min-height: 560px;
        overflow: hidden;
        gap: 0;
      }
      .upload-side {
        min-width: 315px;
        max-width: 360px;
        background: linear-gradient(120deg, #f6f9f7, #eaf7f1 100%);
        border-right: 1.5px solid #e0e9e5;
        padding: 50px 28px 30px 28px;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .upload-side h2 {
        font-size: 1.25rem;
        margin-bottom: 21px;
        font-weight: 700;
        color: #236e54;
      }
      .img-slot {
        width: 220px;
        height: 220px;
        background: #fff;
        border: 2px dashed #82e1c1;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 16px;
        margin-bottom: 18px;
        position: relative;
        overflow: hidden;
        transition: background 0.3s ease, border-color 0.3s ease;
      }
      .img-slot img {
        max-width: 100%;
        max-height: 180px;
        border-radius: 10px;
        display: block;
      }
      .img-slot .slot-placeholder {
        text-align: center;
        color: #b3c5c8;
        font-size: 1.06rem;
        font-style: italic;
      }
      .upload-label {
        background: linear-gradient(100deg, #2e5f3b 60%, #51ccb1 100%);
        color: #fff;
        padding: 12px 25px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1.09rem;
        cursor: pointer;
        transition: background 0.18s, box-shadow 0.18s;
        margin-bottom: 7px;
        box-shadow: 0 2px 10px rgba(40, 120, 56, 0.09);
        display: inline-block;
        outline: none;
        user-select: none;
      }
      .upload-label:active,
      .upload-label:focus {
        background: #227954;
        transform: scale(0.98);
      }
      input[type='file'] {
        display: none;
      }
      .info {
        font-size: 0.97rem;
        color: #459a7a;
        margin-top: 8px;
        text-align: center;
      }
      .anim-panel {
        flex: 1 1 640px;
        padding: 54px 54px 20px 54px;
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 320px;
      }
      .anim-panel h2 {
        font-size: 1.22rem;
        font-weight: 700;
        margin-bottom: 16px;
        color: #2e7c5c;
      }
      .anim-area {
        width: 410px;
        height: 340px;
        background: linear-gradient(120deg, #f7faf9 0%, #e8f9f2 96%);
        border-radius: 22px;
        box-shadow: 0 4px 28px rgba(25, 69, 58, 0.08);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 22px;
      }
      .anim-placeholder {
        text-align: center;
        color: #b7c7bc;
        font-size: 1.13rem;
      }
      .actions {
        margin-top: 2px;
        display: flex;
        gap: 22px;
      }
      .actions button {
        background: linear-gradient(100deg, #2e5f3b 60%, #51ccb1 100%);
        color: #fff;
        font-weight: 700;
        font-size: 1.1rem;
        padding: 13px 29px;
        border-radius: 12px;
        border: none;
        outline: none;
        cursor: pointer;
        transition: background 0.2s, box-shadow 0.2s, transform 0.18s;
        box-shadow: 0 2px 14px rgba(30, 95, 59, 0.09);
      }
      .actions button:disabled {
        opacity: 0.7;
        background: #dcf7ed;
        color: #c5e8dd;
        cursor: not-allowed;
      }
      .actions button:active,
      .actions button:focus {
        background: #267d5b;
        box-shadow: 0 1px 6px rgba(48, 153, 112, 0.15);
        transform: scale(0.97);
      }
      @media (max-width: 1000px) {
        .main-flex {
          flex-direction: column;
          min-height: unset;
        }
        .upload-side,
        .anim-panel {
          min-width: 0;
          max-width: unset;
          width: 100%;
        }
        .anim-panel {
          padding: 32px 8vw;
        }
        .upload-side {
          padding: 32px 6vw;
        }
        .anim-area {
          width: 98vw;
          max-width: 420px;
        }
      }
      @media (max-width: 600px) {
        .anim-area {
          width: 97vw;
          min-width: unset;
        }
        .main-flex {
          border-radius: 0;
        }
        .anim-panel,
        .upload-side {
          padding: 15px 1vw;
        }
      }
    </style>
  </head>
  <body>
    <div class="trace-bar">
      <div class="brand">
        <svg viewBox="0 0 60 60">
          <circle cx="30" cy="30" r="27" stroke="#26b178" stroke-width="3" fill="none" />
          <ellipse cx="30" cy="30" rx="19" ry="7" stroke="#d6372b" stroke-width="2.5" fill="none" />
          <circle cx="30" cy="30" r="2.5" fill="#d6372b" />
          <path d="M11 30 Q30 11, 49 30 Q30 47, 11 30 Z" stroke="#26b178" stroke-width="2" fill="none" />
        </svg>
        <h1>KolamVerse</h1>
      </div>
      <span class="section-title">KolamTrace</span>
    </div>
    <div class="main-flex">
      <div class="upload-side">
        <h2>1. Upload Kolam Image</h2>
        <div class="img-slot" id="preview-box">
          <img id="preview-img" src="" alt="Your image preview" style="display: none" />
          <span class="slot-placeholder" id="preview-placeholder">No image uploaded</span>
        </div>
        <label class="upload-label" for="kolam-upload">
          <span>Choose Image</span>
          <input type="file" id="kolam-upload" accept="image/*" />
        </label>
        <div class="info">JPG, PNG, GIF • Max 2MB</div>
      </div>
      <div class="anim-panel">
        <h2>2. Kolam Animation</h2>
        <div class="anim-area" id="anim-area">
          <div class="anim-placeholder" id="anim-placeholder">Upload a Kolam image and press <b>Animate</b> to view the tracing animation!</div>
        </div>
        <div class="actions">
          <button id="animate-btn" disabled>Animate</button>
          <button id="prev-btn" disabled>&laquo; 20 Frames</button>
          <button id="next-btn" disabled>20 Frames &raquo;</button>
        </div>
      </div>
    </div>

    <script>
      // Adapted your original script to match updated IDs and structure

      const fileInput = document.getElementById('kolam-upload');
      const previewImg = document.getElementById('preview-img');
      const previewPlaceholder = document.getElementById('preview-placeholder');
      const animateBtn = document.getElementById('animate-btn');
      const canvas = document.getElementById('animationCanvas');
      const ctx = canvas?.getContext('2d');
      const back20Btn = document.getElementById('prev-btn');
      const forward20Btn = document.getElementById('next-btn');

      let frames = [];
      let currentFrame = 0;
      let liveInterval = null;
      let navImg = new Image();

      fileInput.addEventListener('change', () => {
        const file = fileInput.files[0];
        if (file) {
          previewImg.src = URL.createObjectURL(file);
          previewImg.style.display = '';
          previewPlaceholder.style.display = 'none';
          animateBtn.disabled = false;
        } else {
          previewImg.style.display = 'none';
          previewPlaceholder.style.display = '';
          animateBtn.disabled = true;
        }
      });

      animateBtn.addEventListener('click', async () => {
        const file = fileInput.files[0];
        if (!file) {
          alert('Select a file.');
          return;
        }

        frames = [];
        currentFrame = 0;
        back20Btn.disabled = true;
        forward20Btn.disabled = true;
        if (ctx) ctx.clearRect(0, 0, canvas.width, canvas.height);

        previewImg.src = URL.createObjectURL(file);

        const formData = new FormData();
        formData.append('file', file);

        const res = await fetch('/upload_kolam', { method: 'POST', body: formData });
        const data = await res.json();
        if (data.error) return alert('Error: ' + data.error);

        if (liveInterval) clearInterval(liveInterval);

        const streamImg = new Image();
        streamImg.src = `/animate_kolam?csv_file=${encodeURIComponent(data.csv_file)}`;
        streamImg.crossOrigin = 'anonymous';

        liveInterval = setInterval(() => {
          try {
            if (ctx) ctx.drawImage(streamImg, 0, 0, canvas.width, canvas.height);
          } catch (e) {}
        }, 30);

        const pollSnapshots = async () => {
          try {
            const snapRes = await fetch(`/kolam_snapshots`);
            if (!snapRes.ok) {
              setTimeout(pollSnapshots, 4000);
              return;
            }
            const snapData = await snapRes.json();

            frames = snapData.frames;
            currentFrame = frames.length - 1;

            clearInterval(liveInterval);

            navImg.onload = () => {
              if (ctx) ctx.drawImage(navImg, 0, 0, canvas.width, canvas.height);
            };
            navImg.src = 'data:image/jpeg;base64,' + frames[currentFrame];

            back20Btn.disabled = false;
            forward20Btn.disabled = false;
          } catch (err) {
            setTimeout(pollSnapshots, 4000);
          }
        };
        pollSnapshots();
      });

      function updateFrame(idx) {
        if (frames.length === 0) return;
        currentFrame = Math.max(0, Math.min(idx, frames.length - 1));
        navImg.onload = () => {
          if (ctx) ctx.drawImage(navImg, 0, 0, canvas.width, canvas.height);
        };
        navImg.src = 'data:image/jpeg;base64,' + frames[currentFrame];
      }

      back20Btn.addEventListener('click', () => updateFrame(currentFrame - 20));
      forward20Btn.addEventListener('click', () => updateFrame(currentFrame + 20));
    </script>
  </body>
</html>
